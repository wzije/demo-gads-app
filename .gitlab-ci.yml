image: golang:latest
# branch yang menjalanka proses ci hanya branch prefix feature

workflow:
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables:
        DEPLOY_VARIABLE: "deploy-production"  # Override globally-defined DEPLOY_VARIABLE
    - if: $CI_COMMIT_REF_NAME =~ /feature/
      variables:
        IS_A_FEATURE: "true"                  # Define a new variable.
    - when: always

variables:
  DOCKER_HUB_USER: wzije

stages:
  - lint
  - test
  - build
  # - deploy


test_lint:
  stage: lint
  image: golangci/golangci-lint
  script:
    - golangci-lint run

test_code:
  stage: test
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
    - go test $(go list ./... | grep -v /vendor/) -v -test.short

build_artefact:
  stage: build
  script:
    - mkdir bin
    - mkdir bin/win
    - mkdir bin/mac
    - mkdir bin/linux
    - GOOS=windows GOARCH=amd64 go build -o bin/win ./...
    - GOOS=darwin GOARCH=amd64 go build -o bin/mac ./...
    - GOOS=linux GOARCH=amd64 go build -o bin/linux ./...
  artifacts:
    paths:
      - bin

build_image:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:latest

build_to_docker_hub:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD
  script:
    - docker build -t wzie/demo-gads-app:latest .
    - docker push wzie/demo-gads-app:latest

# deploy:
#   stage: deploy
#   script: echo "Define your deployment script!"
#   environment: production
